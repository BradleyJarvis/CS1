<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IntroductionTextBox.Text" xml:space="preserve">
    <value>Before we looked at how if both user had a secret shared number they could send information between each other safely and securely. However there are a number of problems with that system, mainly that the process must be used every time that a new person wants to communicate. Is the sender is a bank for example the idea of having a large unique set of keys for every customer every time they connect is impractical. It would be far easier if the was only one key that the bank had to remember. This is where RSA Encryption is useful.</value>
  </data>
  <data name="OutlineTextBox.Text" xml:space="preserve">
    <value>Imagine encrypting and decrypting as separate functions. The customer would only need to know how to encrypt not how to decrypt. So is the bank where to give the customer a way to encrypt but not to decrypt they would only need one key that they could share with everyone.

In the last section we saw how using  Received^Secret MOD RandomNumber= gave a result that is easy to compute in if you know all those values but given the answer and not the secret number was hard. We can call this equation m^e MOD N = c .

What we need is a way to change the equation so that you can undo this equation without knowing m but without letting the customer or any other ne'er do wells  be able to do this.

If this could be done by c^d MOD N = m where d if the key only the bank knows, and if this decryption key (d) could be used so that m^ed MOD N = m it would make a hard problem easy, but only if you have d. This however requires another one way function (a function that is easy to do but hard to undo).</value>
  </data>
  <data name="FacorisingIntroductionTextBox.Text" xml:space="preserve">
    <value>For this problem we have to look at prime factorisation. Prime factorisation means finding how a number can be created by multiplying prime numbers (except 1). For example the prime factorisation of 30 = 5 x 3 x 2 . There exactly one combination of prime numbers for each number. Prime factorisation however is a fundamentally hard problem and the time required to compute the prime factors of numbers increases exponentially.  </value>
  </data>
  <data name="StartingTextBox.Text" xml:space="preserve">
    <value>Lets work through an example using two prime numbers under 100, these in reality would be thousands of bits long and randomly generated. The first step is to multiply them together. Press “Generate and Multiply” to fill in the prime numbers and multiply them together.

Because we know the two prime numbers that multiplied to create this new number we know its prime factorisation but it would be hard to find that without knowing the 2 prime numbers we started with (especially when the numbers involved are thousands of digits long). </value>
  </data>
  <data name="PhiTextBox.Text" xml:space="preserve">
    <value>We can use something called the Phi (Փ) function. The Phi(Փ) of a number is the amount of integers that are less than or equal to it that do not share any factors with it. For example if we look at the number 12 we would list all the numbers from 1 to 12 then we would count how many integers do not share a factor with it. (this ignores 1 as a factor)
1̲ 2 3 4 5̲ 6 7̲ 8 9 10 1̲1̲ 12
The numbers that share no factor are underlined above. In this case there are 4 so the Phi(Փ) of 12 is 4.
Finding the Փ of a number is hard to do unless the number is prime. If a number is prime then its Փ is itself - 1. So if we know that 21377 is prime we know Փ(21377) = 21376 easy to compute compared to non prime numbers. However the Փ function is also multiplicative so Փ(AxB) = Փ(A) x Փ(B) so knowing this we can find the Փ of our number we made before with ease compared to someone who did not know its prime factorisation. For example is we had the prime numbers 71 and 59 we could find the Փ easily. It’s just 
Փ(4189) = (71 - 1) x (59 -1) = 4060. Press “Find Փ” to fill in this detail for the prime numbers we are using in the example.</value>
  </data>
  <data name="DTextBox.Text" xml:space="preserve">
    <value>In order to use this in cryptography the Փ of a number was connected to the MOD function using Euler’s theorem. This theorem states that m^Փ(n) ≡ 1 MOD n. It is also known that 1 to the power of any number is 1, so 1 ^k = 1. Therefore m^k*Փ(n) ≡ 1 MOD n. It is also known that 1 * m = m where m is any number. So my multiplying both sides of the equation by m we arrive at m*m^k*Փ(n)≡ m MOD n or to simplify 
m^k*Փ(n)+1≡ m MOD n
This equation can be used so that in m^ed ≡ m MOD n it is only easy to find d if the factorisation of n is known. because it can be simplified to d = (k*Փ(n)+1)/e. Therefore d should be the private key.
Lets fill out our example, say the exponent (e) is a random number between 3 and 20 that would mean that  would mean that 
d= (2*(Phi Secret) +1 ) / Exponent
Press "Find d" to do this equation</value>
  </data>
  <data name="ConverToNumberTextBox.Text" xml:space="preserve">
    <value>We now have D, the private key. Now to send the data.Characters are stored in binary. the letter h for example would be 104. So if the sender wanted to send the message hello, it would convert into 104, 101, 108, 108, 111 the ASCII values. They could send this all as one number or as several messages. For this example we will send one letter with "A" being 1 and "Z" being 26. Select the letter you want to send and press "Convert to a number".</value>
  </data>
</root>